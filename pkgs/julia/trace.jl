precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.SHA1, Union{Base.SHA1, String}}, String, Base.SHA1})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Libdl.dlopen), String, UInt32})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{URIs.RegexAndMatchData, 1}, URIs.RegexAndMatchData})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{HTTP.Parsers.RegexAndMatchData, 1}, HTTP.Parsers.RegexAndMatchData})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, 1}, Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}, 1}, Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}})
precompile(Tuple{typeof(Base.Experimental.register_error_hint), Function, Type{T} where T})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.MPFR.BigFloat, 1}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PlotThemes.PlotTheme}, PlotThemes.PlotTheme, Symbol})
precompile(Tuple{typeof(Base.get!), Type{Array{Function, 1}}, Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Function, 1}, Function})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.foreach), Function, Array{Base.Dict{Symbol, Any}, 1}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Plots.treats_y_as_x), Symbol})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.atreplinit), Function})
precompile(Tuple{typeof(REPL.Terminals.hascolor), REPL.Terminals.TTYTerminal})
precompile(Tuple{Type{REPL.REPLHistoryProvider}, Any})
precompile(Tuple{Type{REPL.REPLHistoryProvider}, Any, Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(REPL.run_repl), REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.:(==)), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, REPL.REPLDisplay{R} where R<:REPL.AbstractREPL})
precompile(Tuple{Type{REPL.LineEdit.PromptState}, REPL.Terminals.AbstractTerminal, REPL.LineEdit.Prompt, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Array{Base.GenericIOBuffer{Array{UInt8, 1}}, 1}, Int64, REPL.LineEdit.InputAreaState, Int64, Base.AbstractLock, Float64, Float64})
precompile(Tuple{typeof(REPL.LineEdit.init_state), Any, REPL.LineEdit.HistoryPrompt})
precompile(Tuple{typeof(REPL.LineEdit.init_state), Any, REPL.LineEdit.PrefixHistoryPrompt})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Nothing}}, Ptr{Nothing}})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(REPL.LineEdit.prompt_string), AbstractString})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{typeof(REPL.LineEdit.state), REPL.LineEdit.MIState, Any})
precompile(Tuple{typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{typeof(Base.pipeline), Base.TTY, Base.Cmd, Base.TTY})
precompile(Tuple{typeof(Base.convert), Type{IO}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.getproperty), Base.Process, Symbol})
precompile(Tuple{typeof(REPL.LineEdit.edit_abort), Any, Bool})
precompile(Tuple{typeof(Base.push!), Array{Function, 1}, Function})
precompile(Tuple{Plots.var"#271#304"})
precompile(Tuple{Main.var"#1#2", REPL.LineEditREPL})
precompile(Tuple{REPL.var"##setup_interface#61", Bool, Any, typeof(REPL.setup_interface), REPL.LineEditREPL})
precompile(Tuple{Type{REPL.REPLHistoryProvider}, Any, Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Pair{Char, REPLComboShell.var"#52#72"{REPL.LineEdit.PrefixHistoryPrompt}}}, Any, Any})
precompile(Tuple{Type{Base.Pair{Char, REPLComboShell.var"#53#73"{REPL.LineEdit.Prompt}}}, Any, Any})
precompile(Tuple{Type{Base.Pair{Char, REPLComboShell.var"#55#75"{REPL.LineEdit.Prompt}}}, Any, Any})
precompile(Tuple{Plots.var"#247#280", REPL.LineEditREPL})
precompile(Tuple{typeof(REPL.run_repl), REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.:(==)), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, REPL.REPLDisplay{R} where R<:REPL.AbstractREPL})
precompile(Tuple{Type{REPL.LineEdit.PromptState}, REPL.Terminals.AbstractTerminal, REPL.LineEdit.Prompt, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Array{Base.GenericIOBuffer{Array{UInt8, 1}}, 1}, Int64, REPL.LineEdit.InputAreaState, Int64, Base.AbstractLock, Float64, Float64})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{REPL.LineEdit.var"#22#23"{REPL.LineEdit.var"#113#166", String}, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#113#166", Any, Any, Vararg{Any, N} where N})
precompile(Tuple{REPL.LineEdit.var"##edit_abort#108", Any, typeof(REPL.LineEdit.edit_abort), Any, Bool})
precompile(Tuple{REPL.var"#63#72"{Base.IOStream}, Any})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Pkg.Artifacts.var"#parse_mapping#5"{String}, String, String})

precompile(Tuple{typeof(Base.push!), Array{Function, 1}, Function})
precompile(Tuple{typeof(Base.atreplinit), Function})
precompile(Tuple{typeof(Base.CoreLogging.with_logger), Function, Logging.ConsoleLogger})
precompile(Tuple{InteractiveUtils.var"#define_editor##kw", NamedTuple{(:wait,), Tuple{Bool}}, typeof(InteractiveUtils.define_editor), Function, String})
precompile(Tuple{Main.var"#1#2", REPL.LineEditREPL})
precompile(Tuple{Type{REPL.REPLHistoryProvider}, Any, Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Pair{Char, REPLComboShell.var"#81#103"{REPL.LineEdit.PrefixHistoryPrompt}}}, Any, Any})
precompile(Tuple{Type{Base.Pair{Char, REPLComboShell.var"#82#104"{REPL.LineEdit.Prompt}}}, Any, Any})
precompile(Tuple{Type{Base.Pair{Char, REPLComboShell.var"#84#106"{REPL.LineEdit.Prompt}}}, Any, Any})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, REPLComboShell.var"#80#102"}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, REPLComboShell.var"#89#111"{REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{Char, Any}}, Base.Dict{Char, Any}})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, REPLComboShell.var"#92#114"{REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.convert), Type{Function}, REPLComboShell.var"#95#117"{REPL.LineEditREPL, REPL.LineEdit.Prompt}})
precompile(Tuple{typeof(REPL.run_repl), REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.:(==)), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, REPL.REPLDisplay{R} where R<:REPL.AbstractREPL})
precompile(Tuple{Type{REPL.LineEdit.PromptState}, REPL.Terminals.AbstractTerminal, REPL.LineEdit.Prompt, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Array{Base.GenericIOBuffer{Array{UInt8, 1}}, 1}, Int64, REPL.LineEdit.InputAreaState, Int64, Base.AbstractLock, Float64, Float64})
precompile(Tuple{typeof(REPL.LineEdit.init_state), Any, REPL.LineEdit.HistoryPrompt})
precompile(Tuple{typeof(REPL.LineEdit.init_state), Any, REPL.LineEdit.PrefixHistoryPrompt})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(REPL.LineEdit.prompt_string), AbstractString})
precompile(Tuple{REPL.LineEdit.var"#22#23"{REPL.LineEdit.var"#133#186", String}, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#22#23"{REPL.LineEdit.var"#110#163", String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{typeof(REPL.LineEdit.state), REPL.LineEdit.MIState, Any})
precompile(Tuple{REPL.var"#do_respond#54"{Bool, Bool, REPLComboShell.var"#parse_to_expr#100"{REPL.LineEdit.Prompt, REPLComboShell.var"#set_prompt#98"{String}}, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Any, Any, Any})
precompile(Tuple{REPLComboShell.var"#parse_to_expr#100"{REPL.LineEdit.Prompt, REPLComboShell.var"#set_prompt#98"{String}}, String})
precompile(Tuple{typeof(Base.copyto!), Array{Function, 1}, Tuple{REPLComboShell.var"#5#15", REPLComboShell.var"#8#18"}})
precompile(Tuple{REPLComboShell.var"#5#15", Base.SubString{String}, Base.Dict{Tuple{Symbol, Int64}, Union{Nothing, Tuple{Any, Base.SubString{T} where T<:AbstractString}}}})
precompile(Tuple{REPLComboShell.var"#7#17", Base.SubString{String}, Base.Dict{Tuple{Symbol, Int64}, Union{Nothing, Tuple{Any, Base.SubString{T} where T<:AbstractString}}}})
precompile(Tuple{REPLComboShell.var"#37#43", Base.SubString{String}, Base.Dict{Tuple{Symbol, Int64}, Union{Nothing, Tuple{Any, Base.SubString{T} where T<:AbstractString}}}})
precompile(Tuple{REPLComboShell.var"#47#52", Base.SubString{String}, Base.Dict{Tuple{Symbol, Int64}, Union{Nothing, Tuple{Any, Base.SubString{T} where T<:AbstractString}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{Symbol, Int64}, Union{Nothing, Tuple{Any, Base.SubString{T} where T<:AbstractString}}}, Tuple{Base.SubString{String}, Base.SubString{String}}, Tuple{Symbol, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.SubString{String}, Base.SubString{String}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.SubString{String}, Base.SubString{String}}, Int64, Int64})
precompile(Tuple{REPLComboShell.var"#48#53", Base.SubString{String}, Base.Dict{Tuple{Symbol, Int64}, Union{Nothing, Tuple{Any, Base.SubString{T} where T<:AbstractString}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Function, 1}, Tuple{PEG.var"#1#2"{String}, PEG.var"#3#5"{Symbol, Base.Regex}, PEG.var"#1#2"{String}}})
precompile(Tuple{PEG.var"#1#2"{String}, Base.SubString{String}, Base.Dict{Tuple{Symbol, Int64}, Union{Nothing, Tuple{Any, Base.SubString{T} where T<:AbstractString}}}})
precompile(Tuple{REPLComboShell.var"#49#54", Base.SubString{String}, Base.Dict{Tuple{Symbol, Int64}, Union{Nothing, Tuple{Any, Base.SubString{T} where T<:AbstractString}}}})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Nothing, Tuple{Any, Base.SubString{T} where T<:AbstractString}}, 1}, Tuple{Base.SubString{String}, Base.SubString{String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{Symbol, Int64}, Union{Nothing, Tuple{Any, Base.SubString{T} where T<:AbstractString}}}, Tuple{Array{Any, 1}, Base.SubString{String}}, Tuple{Symbol, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Any, 1}, Base.SubString{String}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Any, 1}, Base.SubString{String}}, Int64, Int64})
precompile(Tuple{REPLComboShell.var"#38#44", Array{Any, 1}})
precompile(Tuple{typeof(Base.iterate), Base.SubString{String}})
precompile(Tuple{typeof(Base.iterate), Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.arg_gen), Char, Char})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{Symbol, Int64}, Union{Nothing, Tuple{Any, Base.SubString{T} where T<:AbstractString}}}, Tuple{Base.Cmd, Base.SubString{String}}, Tuple{Symbol, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Cmd, Base.SubString{String}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Cmd, Base.SubString{String}}, Int64, Int64})
precompile(Tuple{REPLComboShell.var"#8#18", Base.SubString{String}, Base.Dict{Tuple{Symbol, Int64}, Union{Nothing, Tuple{Any, Base.SubString{T} where T<:AbstractString}}}})
precompile(Tuple{REPLComboShell.var"#10#20", Base.SubString{String}, Base.Dict{Tuple{Symbol, Int64}, Union{Nothing, Tuple{Any, Base.SubString{T} where T<:AbstractString}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Function, 1}, Tuple{PEG.var"#3#5"{Symbol, Base.Regex}, REPLComboShell.var"#25#31"}})
precompile(Tuple{PEG.var"#3#5"{Symbol, Base.Regex}, Base.SubString{String}, Base.Dict{Tuple{Symbol, Int64}, Union{Nothing, Tuple{Any, Base.SubString{T} where T<:AbstractString}}}})
precompile(Tuple{typeof(REPLComboShell.process_pipeline), Array{Any, 1}})
precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{Base.Cmd}})
precompile(Tuple{typeof(Base.push!), Array{Base.Cmd, 1}, Base.Cmd})
precompile(Tuple{typeof(Base.grow_to!), Array{Base.Cmd, 1}, Base.Iterators.Flatten{Array{Any, 1}}, Tuple{Int64, Array{Any, 1}, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Base.SubString{String}, String})
precompile(Tuple{typeof(Base.open), Function, Base.CmdRedirect, String})
precompile(Tuple{Base.var"##open#595", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), REPLComboShell.var"#79#101", Base.CmdRedirect, String})
precompile(Tuple{REPLComboShell.var"#79#101", Base.Process})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Nothing, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64, Int64})
precompile(Tuple{REPL.LineEdit.var"#22#23"{REPL.LineEdit.var"#109#162", String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.complete_line), REPLComboShell.JulishCompletionProvider, REPL.LineEdit.PromptState})
precompile(Tuple{Base.var"#shell_escape##kw", NamedTuple{(:special,), Tuple{String}}, typeof(Base.shell_escape), String, String, Vararg{String, N} where N})
precompile(Tuple{Base.var"##shell_escape#372", String, typeof(Base.shell_escape), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.sprint), Function, String, Vararg{String, N} where N})
precompile(Tuple{Base.var"##sprint#355", Nothing, Int64, typeof(Base.sprint), Function, String, Vararg{String, N} where N})
precompile(Tuple{Base.var"#373#374"{String}, Base.GenericIOBuffer{Array{UInt8, 1}}, String, Vararg{String, N} where N})
precompile(Tuple{Base.var"#print_shell_escaped##kw", NamedTuple{(:special,), Tuple{String}}, typeof(Base.print_shell_escaped), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String, Vararg{String, N} where N})
precompile(Tuple{Base.var"##print_shell_escaped#370", String, typeof(Base.print_shell_escaped), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Char, String, Vararg{Any, N} where N})
precompile(Tuple{Base.var"#592#593"{Base.Process}})
precompile(Tuple{REPL.LineEdit.var"#22#23"{REPLComboShell.var"#86#108"{REPL.LineEdit.Prompt}, String}, Any, Any})
precompile(Tuple{REPLComboShell.var"#86#108"{REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.deactivate), REPL.LineEdit.TextInterface, REPL.LineEdit.ModeState, Any, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{REPL.LineEdit.var"#22#23"{REPL.LineEdit.var"#113#166", String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_abort), Any, Bool})
precompile(Tuple{REPL.var"#63#72"{Base.IOStream}, Any})
